;;; format-next-proc-sql-block.el --- Auto-format embedded SQL in Pro*C files -*- lexical-binding: t -*-

;;; Commentary:
;;
;; This function finds and formats the next embedded SQL block in a Pro*C file.
;; It supports both styles of Pro*C embedding:
;;
;;   - EXEC SQL <statements> ;
;;   - EXEC SQL <statements> END-EXEC;
;;
;; It extracts just the SQL content (excluding the EXEC SQL / END-EXEC; wrappers),
;; sends it to the external SQL formatter `sqlformat`, and replaces the block
;; in-place with the formatted version.
;;
;; üì¶ Prerequisites:
;; - Python's sqlformat CLI from the `sqlparse` package:
;;     pip install sqlparse
;; - Ensure `sqlformat` is available in your PATH.
;;
;; üß™ Usage:
;; 1. Open a `.pc` Pro*C file.
;; 2. Place cursor anywhere before or inside an EXEC SQL block.
;; 3. Run: M-x format-next-proc-sql-block
;;
;; üéØ Optional Keybinding:
;; (add-hook 'c-mode-hook
;;   (lambda ()
;;     (local-set-key (kbd "C-c C-e") #'format-next-proc-sql-block)))
;;
;; ‚ö†Ô∏è Limitations:
;; - Assumes one SQL block per EXEC SQL.
;; - Does not parse nested EXEC SQL within C macros.
;; - Formatting replaces SQL region only‚Äîwrappers are preserved.

;;; Code:

(defun format-next-proc-sql-block ()
  "Find and format the next EXEC SQL block using sqlformat.
Supports both 'EXEC SQL ... ;' and 'EXEC SQL ... END-EXEC;' forms."
  (interactive)
  (let ((exec-sql-regexp "EXEC[ \t\n]+SQL[ \t\n]+")
        (end-semi-regexp ";[ \t]*\\(?:--.*\\)?[ \t]*\n?")
        (end-block-regexp "END-EXEC[ \t]*;[ \t]*\\(?:--.*\\)?[ \t]*\n?")
        start end)
    (save-excursion
      ;; Find EXEC SQL start
      (if (re-search-forward exec-sql-regexp nil t)
          (progn
            (setq start (point))

            ;; Look ahead for END-EXEC; or just ;
            (if (re-search-forward end-block-regexp nil t)
                (setq end (match-beginning 0))
              (when (re-search-forward end-semi-regexp nil t)
                (setq end (match-beginning 0))))

            (if (and start end)
                (let* ((sql-original (buffer-substring-no-properties start end))
                       (formatted-sql-buffer "*Formatted SQL*"))

                  ;; Format with sqlformat
                  (with-temp-buffer
                    (insert sql-original)
                    (shell-command-on-region
                     (point-min) (point-max)
                     "sqlformat -r -k upper -s -"
                     formatted-sql-buffer
                     nil "*SQL Format Errors*" t))

                  ;; Replace original SQL with formatted
                  (with-current-buffer formatted-sql-buffer
                    (let ((formatted-sql (string-trim (buffer-string))))
                      (delete-region start end)
                      (goto-char start)
                      (insert formatted-sql)))
                  (kill-buffer formatted-sql-buffer)
                  (message "Formatted embedded SQL."))
              (message "Could not find terminating ';' or END-EXEC; for EXEC SQL block.")))
        (message "No EXEC SQL block found.")))))
